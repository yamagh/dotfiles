[[plugins]]
repo     = 'tomasr/molokai'
on_event = ['VimEnter']
hook_post_source = '''
  colorscheme molokai
'''

[[plugins]]
repo   = 'vim-jp/vimdoc-ja'
on_cmd = ['h', 'help']

[[plugins]]
repo     = 'Shougo/unite.vim'
on_cmd   = ['Unite']
hook_add = '''
  let g:unite_enable_start_insert        = 1
  let g:unite_source_history_yank_enable = 1
  let g:unite_source_file_mru_limit      = 200
  nnoremap <silent> <space>uf :Unite<space>file_rec<CR>
  nnoremap <silent> <space>ur :Unite<space>neomru/file<CR>
'''
hook_post_source = '''
  call unite#custom_default_action('file', 'tabopen')
'''

[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = ['unite.vim']

#[[plugins]]
#repo = 'neocomplete.vim'

[[plugins]]
repo     = 'Shougo/neosnippet'
hook_add = '''
    if has('mac')
      let g:neosnippet#snippets_directory = '~/GoogleDrive/snippets'
    elseif has('win16') || has('win32') || has('win64')
      let g:neosnippet#snippets_directory = '~/GoogleDrive/snippets'
    else
      let g:neosnippet#snippets_directory = '~/snippets'
    endif
    "if !isdirectory(g:neosnippet#snippets_directory)
    "  call mkdir(iconv(g:neosnippet#snippets_directory, &encoding, &termencoding), 'p')
    "endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]] 
repo = 'Shougo/context_filetype.vim'

# 現在のカーソル位置のコンテキストによって filetype を切り換える為のプラグイン。
[[plugins]]
repo    = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Townk/vim-autoclose'
on_i = 1

[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo     = 'easymotion/vim-easymotion'
on_map   = ['<Plug>(easymotion-']
hook_add = '''
  " Find Motions
    nmap <space>f <Plug>(easymotion-s2)
    xmap <space>f <Plug>(easymotion-s2)
    omap <space>f <Plug>(easymotion-s2)
  " Line Motions
    map <space>j <Plug>(easymotion-j)
    map <space>k <Plug>(easymotion-k)
  " Search Motions
  " Extend search motions with vital-over command line interface
  " Incremental highlight of all the matches
  " Now, you don't need to repetitively press `n` or `N` with EasyMotion feature
  " `<Tab>` & `<S-Tab>` to scroll up/down a page with next match
  " :h easymotion-command-line
    nmap g/ <Plug>(easymotion-sn)
    xmap g/ <Plug>(easymotion-sn)
    omap g/ <Plug>(easymotion-tn)
'''

[[plugins]]
repo   = 'vim-scripts/renamer.vim'
on_cmd = ['Renamer']

[[plugins]]
repo     = 'junegunn/vim-easy-align'
on_map   = ['<Plug>(EasyAlign)']
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo   = 'vim-scripts/dbext.vim'
on_ft  = ['sql']
on_cmd = ['<Plug>(DB']

[[plugins]]
repo     = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup=1
    let g:indent_guides_start_level=2
    let g:indent_guides_auto_colors=0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#444433 ctermbg=black
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#333344 ctermbg=darkgray
    let g:indent_guides_color_change_percent = 30
    let g:indent_guides_guide_size = 1
'''

[[plugins]]
repo     = 'glidenote/memolist.vim'
on_cmd   = ['MemoNew','MemoList','MemoGrep']
hook_add = '''
    let g:memolist_path = "~/GoogleDrive/Memo"
    let g:memolist_memo_suffix = "md"
    let g:memolist_filename_prefix_none = 1
    let g:memolist_unite = 0
    let g:memolist_unite_source = "file_rec"
    let g:memolist_unite_option = "-start-insert"
    "let g:memolist_template_dir_path = "~/GoogleDrive/Memo/templates"
    nnoremap <space>mn  :MemoNew<CR>
    nnoremap <space>ml  :MemoList<CR>
    nnoremap <space>mg  :MemoGrep<CR>
'''

[[plugins]]
repo     = 'wakatime/vim-wakatime'

[[plugins]]
repo     = 'thinca/vim-quickrun'
on_cmd   = ['QuickRun']
hook_add = '''
    nnoremap <space>run  :QuickRun<cr>
    nnoremap <space>rin1 :QuickRun -input in.1<cr>
    nnoremap <space>rin2 :QuickRun -input in.2<cr>
    nnoremap <space>rin3 :QuickRun -input in.3<cr>
'''

[[plugins]]
repo     = 'vim-scripts/csharp.vim'
on_ft    = ['cs']
hook_add = '''
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo     = 'KazuakiM/vim-sqlfix'
on_ft    = ['sql']
hook_add = '''
    let g:sqlfix#Config = {
        \   'database': 'postgres',
        \   'indent': 2,
        \   'width': 1,
        \   'explain': 0,
        \   'output': 1}
    nnoremap <space>sf :%Sqlfix<cr>
    vnoremap <space>sf :'<,'>Sqlfix<cr>
'''

[[plugins]]
repo     = 'kannokanno/unite-todo'
hook_add = '''
    let g:unite_todo_data_directory ='~'
    let g:unite_todo_note_suffix    ='txt'
    let g:unite_todo_note_opener    ='edit'
    command T     :Unite todo:undone
    command Tls   :Unite todo:undone
    command Tdone :Unite todo:done
    command Tall  :Unite todo
    command Ta    :UniteTodoAddSimple
'''

[[plugins]]
repo     = 'vim-scripts/tetris.vim'


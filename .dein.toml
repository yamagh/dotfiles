[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo     = 'tomasr/molokai'
on_event = ['VimEnter']
hook_post_source = '''
  colorscheme molokai
'''

[[plugins]]
repo   = 'vim-jp/vimdoc-ja'
on_cmd = ['h', 'help']

[[plugins]]
repo     = 'Shougo/unite.vim'
on_cmd   = ['Unite']
hook_add = '''
  let g:unite_enable_start_insert        = 1
  let g:unite_source_history_yank_enable = 1
  let g:unite_source_file_mru_limit      = 200
  let g:unite_source_grep_default_opts   = '--ignore ''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'' --ignore ''vendor'' '
  nnoremap <silent> <space>uf :Unite<space>file_rec<CR>
  nnoremap <silent> <space>ur :Unite<space>neomru/file<CR>
'''
hook_post_source = '''
  call unite#custom_default_action('file', 'open')

  " .gitignore„ÅßÊåáÂÆö„Åó„Åü„Éï„Ç°„Ç§„É´„Å®.git/‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂÄôË£ú„Åã„ÇâÈô§Â§ñ„Åô„Çã
  "function! s:unite_gitignore_source()
  "  let sources = []
  "  if filereadable('./.gitignore')
  "    for file in readfile('./.gitignore')
  "      " „Ç≥„É°„É≥„ÉàË°å„Å®Á©∫Ë°å„ÅØËøΩÂä†„Åó„Å™„ÅÑ
  "      if file !~ "^#\\|^\s\*$"
  "        call add(sources, file)
  "      endif
  "    endfor
  "  endif
  "  if isdirectory('./.git')
  "    call add(sources, '.git')
  "  endif
  "  let pattern = escape(join(sources, '|'), './|')
  "  call unite#custom#source('file_rec', 'ignore_pattern', pattern)
  "  call unite#custom#source('grep', 'ignore_pattern', pattern)
  "endfunction
  "call s:unite_gitignore_source()
'''

[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = ['unite.vim']

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
'''

[[plugins]]
repo = 'Shougo/neocomplcache.vim'

[[plugins]]
repo     = 'Shougo/neosnippet'
hook_add = '''
    if has('mac')
      let g:neosnippet#snippets_directory = '~/GoogleDrive/snippets/vim'
    elseif has('win16') || has('win32') || has('win64')
      let g:neosnippet#snippets_directory = '~/GoogleDrive/snippets/vim'
    else
      let g:neosnippet#snippets_directory = '~/snippets/vim'
    endif
    "if !isdirectory(g:neosnippet#snippets_directory)
    "  call mkdir(iconv(g:neosnippet#snippets_directory, &encoding, &termencoding), 'p')
    "endif

    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]] 
repo = 'Shougo/context_filetype.vim'

# $B8=:_$N%+!<%=%k0LCV$N%3%s%F%-%9%H$K$h$C$F(B filetype $B$r@Z$j49$($k0Y$N%W%i%0%$%s!#(B
[[plugins]]
repo    = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
on_ft = ['toml','vim']

[[plugins]]
repo = 'Townk/vim-autoclose'
on_i = 1

[[plugins]]
repo     = 'easymotion/vim-easymotion'
on_map   = ['<Plug>(easymotion-']
hook_add = '''
  " Find Motions
    nmap <space>f <Plug>(easymotion-s2)
    xmap <space>f <Plug>(easymotion-s2)
    omap <space>f <Plug>(easymotion-s2)
  " Line Motions
    map <space>j <Plug>(easymotion-j)
    map <space>k <Plug>(easymotion-k)
  " Search Motions
  " Extend search motions with vital-over command line interface
  " Incremental highlight of all the matches
  " Now, you don't need to repetitively press `n` or `N` with EasyMotion feature
  " `<Tab>` & `<S-Tab>` to scroll up/down a page with next match
  " :h easymotion-command-line
    nmap g/ <Plug>(easymotion-sn)
    xmap g/ <Plug>(easymotion-sn)
    omap g/ <Plug>(easymotion-tn)
'''

[[plugins]]
repo   = 'vim-scripts/renamer.vim'
on_cmd = ['Renamer']

[[plugins]]
repo     = 'junegunn/vim-easy-align'
on_map   = ['<Plug>(EasyAlign)']
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo   = 'vim-scripts/dbext.vim'
on_ft  = ['sql']
on_cmd = ['<Plug>(DB']

#[[plugins]]
#repo     = 'nathanaelkane/vim-indent-guides'
#hook_add = '''
#    let g:indent_guides_enable_on_vim_startup=1
#    let g:indent_guides_start_level=2
#    let g:indent_guides_auto_colors=0
#    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#444433 ctermbg=black
#    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#333344 ctermbg=darkgray
#    let g:indent_guides_color_change_percent = 30
#    let g:indent_guides_guide_size = 1
#'''

[[plugins]]
repo     = 'glidenote/memolist.vim'
on_cmd   = ['MemoNew','MemoList','MemoGrep']
hook_add = '''
    let g:memolist_path = "~/Dropbox/Note"
    let g:memolist_memo_suffix = "md"
    let g:memolist_filename_prefix_none = 1
    let g:memolist_unite = 1
    let g:memolist_unite_source = "file_rec"
    let g:memolist_unite_option = "-start-insert"
    "let g:memolist_template_dir_path = "~/GoogleDrive/Memo/templates"
    nnoremap <space>mn  :MemoNew<CR>
    nnoremap <space>ml  :MemoList<CR>
    nnoremap <space>mg  :MemoGrep<CR>
'''

[[plugins]]
repo     = 'thinca/vim-quickrun'
on_cmd   = ['QuickRun']
hook_add = '''
    nnoremap <space>run  :QuickRun<cr>
    nnoremap <space>rin1 :QuickRun -input test/sample-1.in<cr>
    nnoremap <space>rin2 :QuickRun -input test/sample-2.in<cr>
    nnoremap <space>rin3 :QuickRun -input test/sample-3.in<cr>
    nnoremap <space>rin4 :QuickRun -input test/sample-4.in<cr>
    nnoremap <space>rin5 :QuickRun -input test/sample-5.in<cr>
    nnoremap <space>rin6 :QuickRun -input test/sample-6.in<cr>
'''

[[plugins]]
repo     = 'vim-scripts/csharp.vim'
on_ft    = ['cs']
hook_add = '''
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo     = 'KazuakiM/vim-sqlfix'
on_ft    = ['sql']
hook_add = '''
    let g:sqlfix#Config = {
        \   'database': 'postgres',
        \   'indent': 2,
        \   'width': 1,
        \   'explain': 0,
        \   'output': 1}
    nnoremap <space>sf :%Sqlfix<cr>
    vnoremap <space>sf :'<,'>Sqlfix<cr>
'''

#[[plugins]]
#repo     = 'kannokanno/unite-todo'
#hook_add = '''
#    let g:unite_todo_data_directory ='~'
#    let g:unite_todo_note_suffix    ='txt'
#    let g:unite_todo_note_opener    ='edit'
#    command T     :Unite todo:undone
#    command Tls   :Unite todo:undone
#    command Tdone :Unite todo:done
#    command Tall  :Unite todo
#    command Ta    :UniteTodoAddSimple
#'''

#[[plugins]]
#repo     = 'vim-scripts/tetris.vim'

[[plugins]]
repo     = 'slim-template/vim-slim'
on_ft    = ['slim']
hook_add = '''
    autocmd BufNewFile,BufRead *.slim setlocal filetype=slim
'''

[[plugins]]
repo     = 'vim-scripts/open-browser.vim'
on_ft    = ['md', 'markdown']
hook_add = '''
    let g:netrw_nogx = 1 " disable netrw's gx mapping.
    nmap gx <Plug>(openbrowser-smart-search)
    vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo     = 'terryma/vim-multiple-cursors'

[[plugins]]
repo     = 'lambdalisue/vim-gista'
on_cmd   = 'Gista'
hook_add = '''
    let g:gista#client#default_username = 'yamagh'
'''

[[plugins]]
repo      = 'lambdalisue/vim-gista-unite'
on_source = 'unite.vim'
on_cmd    = 'Gista'
depends   = 'vim-gista'
hook_add  = '''
  nnoremap <silent> <space>ug :Unite<space>gista<CR>
'''

[[plugins]]
repo      = 'tpope/vim-fugitive'
on_cmd    = ['Gstatus','Gwrite','Gread','Gcommit','Gdiff','Glog','Gmove','Gremove','Gblame']

[[plugins]]
repo      = 'csexton/jekyll.vim'
on_cmd    = ['JekyllBuild','JekyllList','JekyllPost']
hook_add  = '''
  let g:jekyll_post_suffix       = "md"
  let g:jekyll_post_published    = "true"
  " let g:jekyll_post_created      = "epoch"
  " let g:jekyll_prompt_tags       = "true"
  " let g:jekyll_prompt_categories = "true"
  let g:jekyll_path              = "~/.ghq/github.com/yamagh/yamagh.github.io/"
'''

[[plugins]]
repo      = 'stefanoverna/vim-i18n'
on_ft     = ['eruby','slim','rb']
hook_add  = '''
  vmap <space>it :call I18nTranslateString()<CR>
  vmap <space>id :call I18nDisplayTranslation()<CR>
'''

[[plugins]]
repo      = 'shougo/unite-outline'
depends   = 'unite'
hook_add  = '''
  nnoremap <silent> <space>uo :Unite -no-quit -vertical -winwidth=30 outline<CR>
'''

[[plugins]]
repo      = 'darfink/vim-plist'

[[plugins]]
repo        = 'freitass/todo.txt-vim'
on_ft       = ['todo','todo.txt']

[[plugins]]
repo      = 'fatih/vim-go'

[[plugins]]
repo      = 'mechatroner/rainbow_csv'

[[plugins]]
repo      = 'chrisbra/csv.vim'

